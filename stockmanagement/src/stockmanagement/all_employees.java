/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package stockmanagement;

import java.sql.*;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author Sahil
 */
public class all_employees extends javax.swing.JInternalFrame implements myvariables
{

    /**
     * Creates new form all_accounts
     */
    public all_employees() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jComboBox2 = new javax.swing.JComboBox();
        jComboBox3 = new javax.swing.JComboBox();
        jButton2 = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setTitle("All_Accounts");
        setMinimumSize(new java.awt.Dimension(1300, 700));
        setPreferredSize(new java.awt.Dimension(1300, 650));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameActivated(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("All Employees");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("|");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Filter");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Choose Category" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Employee_Id", "Employee_Name", "Gender", "Department", "Phone", "Salary", "Employee_Status"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Choose", "Employee Id", "Employee Name" }));

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Choose Subcategory" }));
        jComboBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox3ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton2.setText("All");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1264, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(127, 127, 127)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(122, 122, 122)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addGap(173, 173, 173)
                                .addComponent(jButton2)))
                        .addGap(44, 44, 44)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(534, 534, 534))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jButton2)))
                .addGap(36, 36, 36)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void formInternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameActivated
        
        try
            {
                Connection myconnection ; 
                myconnection=DriverManager.getConnection(path+place,username,password);
                try
                {
                String q = "select * from emp_category_table";
                
                PreparedStatement mystatement  = myconnection.prepareStatement(q);
               
                ResultSet myresult = mystatement.executeQuery();
               
                if(myresult.next())
                {
                    do
                    {
                        if(!myresult.getString("category_name").equals("Occupation") && !myresult.getString("category_name").equals("Account_Status"))
                        {
                            jComboBox1.addItem(myresult.getString("category_name"));
                        }
                    }
                    while(myresult.next());
                
                }
                else
                {
                    JOptionPane.showMessageDialog(rootPane,"Add Category in Misc");
                }
                
                        // all employee details
                
                String q2 = "select * from emp_table";
                
                PreparedStatement mystatement2 = myconnection.prepareStatement(q2);
                
                
                ResultSet myresult2 = mystatement2.executeQuery();
                
                DefaultTableModel mymodel = (DefaultTableModel)jTable1.getModel();
                mymodel.setRowCount(0);
                
                if(myresult2.next())
                {
                    do
                    {
                        String id = myresult2.getString("emp_id");
                        String emp_name = myresult2.getString("emp_name");
                        String gender = myresult2.getString("gender");
                        String dept = myresult2.getString("department");
                        String phone = myresult2.getString("phone");
                        String sal = myresult2.getString("salary");
                        
                        String status = myresult2.getString("status");
                        
                        
                        mymodel.addRow(new Object[] {id,emp_name,gender,dept,phone,sal,status});
                    }
                    while(myresult2.next()); 
                }
                else
                {
                    JOptionPane.showMessageDialog(rootPane," No Records Found .");
                }
                
                
               
                }
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(rootPane,"Error in Query , "+e.getMessage());
                }
                finally
                {
                    myconnection.close();
                }
                            
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(rootPane,"Error in Connection "+e.getMessage());
            }
        
    }//GEN-LAST:event_formInternalFrameActivated

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        if(jComboBox2.getSelectedItem().toString().equals("Choose") || jTextField1.getText().equals(""))
        {
            JOptionPane.showMessageDialog(rootPane,"Please fill Mandatory Fields .");
        }
        else
        {
        try
            {
                Connection myconnection ; 
                myconnection=DriverManager.getConnection(path+place,username,password);
                try
                {
               
                            // all accounts details

                    
                if(jComboBox2.getSelectedIndex()==1)
                {
                    String q = "select * from emp_table where emp_id like ?";
                    
                    PreparedStatement mystatement = myconnection.prepareStatement(q);
                    
                    
                    mystatement.setString(1,'%'+jTextField1.getText().toUpperCase()+'%');

                    ResultSet myresult = mystatement.executeQuery();

                    DefaultTableModel mymodel = (DefaultTableModel)jTable1.getModel();
                    mymodel.setRowCount(0);
                
                        if(myresult.next())
                        {
                            do
                            {
                                String id = myresult.getString("emp_id");
                                String emp_name = myresult.getString("emp_name");
                                String gender = myresult.getString("gender");
                                String dept = myresult.getString("department");
                                String phone = myresult.getString("phone");
                                String sal = myresult.getString("salary");

                                String status = myresult.getString("status");
                        
                        
                                mymodel.addRow(new Object[] {id,emp_name,gender,dept,phone,sal,status});
                            }
                            while(myresult.next());
                        }
                        
                        else
                        {
                            JOptionPane.showMessageDialog(rootPane," No Records Found .");
                        }
                    }
                else if(jComboBox2.getSelectedIndex()==2)
                {
                    String q = "select * from emp_table where emp_name like ?";
                    
                    PreparedStatement mystatement = myconnection.prepareStatement(q);
                    
                    
                    mystatement.setString(1,'%'+jTextField1.getText().toUpperCase()+'%');

                    ResultSet myresult = mystatement.executeQuery();

                    DefaultTableModel mymodel = (DefaultTableModel)jTable1.getModel();
                    mymodel.setRowCount(0);
                
                        if(myresult.next())
                        {
                            do
                            {
                                String id = myresult.getString("emp_id");
                                String emp_name = myresult.getString("emp_name");
                                String gender = myresult.getString("gender");
                                String dept = myresult.getString("department");
                                String phone = myresult.getString("phone");
                                String sal = myresult.getString("salary");

                                String status = myresult.getString("status");
                        
                        
                                mymodel.addRow(new Object[] {id,emp_name,gender,dept,phone,sal,status});
                            }
                            while(myresult.next());
                        }
                        
                        else
                        {
                            JOptionPane.showMessageDialog(rootPane," No Records Found .");
                        }
                }
                }
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(rootPane,"Error in Query , "+e.getMessage());
                }
                finally
                {
                    myconnection.close();
                }
                            
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(rootPane,"Error in Connection "+e.getMessage());
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed

        if(!jComboBox1.getSelectedItem().toString().equals("Choose_Category"))
        {
         try
            {
                Connection myconnection ; 
                myconnection=DriverManager.getConnection(path+place,username,password);
                
                try
                {
                String q = "select * from emp_subcategory_table where category_name = ?";
                
                PreparedStatement mystatement  = myconnection.prepareStatement(q);
                mystatement.setString(1,jComboBox1.getSelectedItem().toString());
                
                ResultSet myresult = mystatement.executeQuery();
                 jComboBox3.removeAllItems();
               
                    if(myresult.next())
                    {
                       
                        jComboBox3.addItem("Choose_Subcategory");
                        
                        do
                        {
                            jComboBox3.addItem(myresult.getString("subcategory_name"));
                        }
                        while(myresult.next());

                    }
                    else
                    {
                        JOptionPane.showMessageDialog(rootPane,"Add Subcategory from Misc in Menu Bar");
                    }
                
                        
                }
               
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(rootPane,"Error in Query , "+e.getMessage());
                }
                finally
                {
                    myconnection.close();
                }
                            
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(rootPane,"Error in Connection "+e.getMessage());
            }
        
        }  
                
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jComboBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox3ActionPerformed
        
        if(!jComboBox1.getSelectedItem().toString().equals("Choose_Category") && jComboBox3.getSelectedItem() != null && !jComboBox3.getSelectedItem().toString().equals("Choose_Subcategory"))
        {
         try
            {
                Connection myconnection ; 
                myconnection=DriverManager.getConnection(path+place,username,password);
                
                try
                {
                String q = "select * from emp_table where gender = ? or department = ? or status = ?";
                
                PreparedStatement mystatement  = myconnection.prepareStatement(q);
                mystatement.setString(1,jComboBox3.getSelectedItem().toString());
                mystatement.setString(2,jComboBox3.getSelectedItem().toString());
                mystatement.setString(3,jComboBox3.getSelectedItem().toString());
               
                ResultSet myresult = mystatement.executeQuery();
                
                DefaultTableModel mymodel = (DefaultTableModel)jTable1.getModel();
                mymodel.setRowCount(0);
                
               jTable1.getColumnModel().getColumn(1).setPreferredWidth(50);
                
                if(myresult.next())
                {
                    do
                    {
                                String id = myresult.getString("emp_id");
                                String emp_name = myresult.getString("emp_name");
                                String gender = myresult.getString("gender");
                                String dept = myresult.getString("department");
                                String phone = myresult.getString("phone");
                                String sal = myresult.getString("salary");

                                String status = myresult.getString("status");
                        
                        
                                mymodel.addRow(new Object[] {id,emp_name,gender,dept,phone,sal,status});
                        
                        
                       
                    }
                    while(myresult.next());
                }
                    else
                    {
                        JOptionPane.showMessageDialog(rootPane,"No Records Found .");
                    }
                
                        
                }
               
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(rootPane,"Error in Query , "+e.getMessage());
                }
                finally
                {
                    myconnection.close();
                }
                            
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(rootPane,"Error in Connection "+e.getMessage());
            }
        
        }       
        

        
    }//GEN-LAST:event_jComboBox3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
       
         try
            {
                Connection myconnection ; 
                myconnection=DriverManager.getConnection(path+place,username,password);
                try
                {
                
                        // all employee details
                
                String q2 = "select * from emp_table";
                
                PreparedStatement mystatement2 = myconnection.prepareStatement(q2);
                
                
                ResultSet myresult2 = mystatement2.executeQuery();
                
                DefaultTableModel mymodel = (DefaultTableModel)jTable1.getModel();
                mymodel.setRowCount(0);
                
                if(myresult2.next())
                {
                    do
                    {
                        String id = myresult2.getString("emp_id");
                        String emp_name = myresult2.getString("emp_name");
                        String gender = myresult2.getString("gender");
                        String dept = myresult2.getString("department");
                        String phone = myresult2.getString("phone");
                        String sal = myresult2.getString("salary");
                        
                        String status = myresult2.getString("status");
                        
                        
                        mymodel.addRow(new Object[] {id,emp_name,gender,dept,phone,sal,status});
                    }
                    while(myresult2.next()); 
                }
                else
                {
                    JOptionPane.showMessageDialog(rootPane," No Records Found .");
                }
                
                
               
                }
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(rootPane,"Error in Query , "+e.getMessage());
                }
                finally
                {
                    myconnection.close();
                }
                            
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(rootPane,"Error in Connection "+e.getMessage());
            }
        
        
    }//GEN-LAST:event_jButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JComboBox jComboBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
